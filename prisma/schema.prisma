generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model course {
  id         Int       @id(map: "PK_course") @default(autoincrement()) @map("c_id")
  name       String    @map("c_name") @db.NChar(20)
  start_date DateTime  @map("c_start_date") @db.Date
  end_date   DateTime  @map("c_end_date") @db.Date
  form       Int       @map("c_form") @db.TinyInt
  subjects   subject[]

  @@index([name], map: "IX_course_name")
}

model group {
  id       Int             @id(map: "PK_group") @default(autoincrement()) @map("g_id")
  number   String          @map("g_number") @db.NChar(10)
  form     Int             @map("g_form") @db.TinyInt
  students student[]
  subjects subject_group[]

  @@index([number], map: "IX_group_number")
}

model lesson {
  id         String    @id(map: "PK_lesson") @map("l_id") @db.UniqueIdentifier
  start_time DateTime  @map("l_start_time") @db.DateTime
  end_time   DateTime  @map("l_end_time") @db.DateTime
  subject_id Int       @map("l_subject_id")
  location   String    @map("l_location") @db.NChar(30)
  teacher_id String    @map("l_teacher_id") @db.UniqueIdentifier
  subject    subject   @relation(fields: [subject_id], references: [id], onUpdate: NoAction, map: "FK_lesson_subject")
  user       user      @relation(fields: [teacher_id], references: [id], onUpdate: NoAction, map: "FK_lesson_user")
  absences   absence[]
  grades     grade[]

  @@index([start_time, end_time], map: "IX_lesson_start_time_end_time")
  @@index([subject_id], map: "IX_lesson_subject_id")
}

model absence {
  student_id String  @map("lsa_student_id") @db.UniqueIdentifier
  lesson_id  String  @map("lsa_lesson_id") @db.UniqueIdentifier
  hours      Int     @map("lsa_hours") @db.TinyInt
  lesson     lesson  @relation(fields: [lesson_id], references: [id], onUpdate: NoAction, map: "FK_lesson_student_absence_lesson")
  student    student @relation(fields: [student_id], references: [id], onUpdate: NoAction, map: "FK_lesson_student_absence_student")

  @@id([student_id, lesson_id], map: "PK_lesson_student_absence")
  @@map("lesson_student_absence")
}

model grade {
  student_id  String  @map("lsg_student_id") @db.UniqueIdentifier
  lesson_id   String  @map("lsg_lesson_id") @db.UniqueIdentifier
  grade_value Int     @map("lsg_grade_value") @db.TinyInt
  lesson      lesson  @relation(fields: [lesson_id], references: [id], onUpdate: NoAction, map: "FK_lesson_student_grade_lesson")
  student     student @relation(fields: [student_id], references: [id], onUpdate: NoAction, map: "FK_lesson_student_grade_student")

  @@id([student_id, lesson_id], map: "PK_lesson_student_grade")
  @@map("lesson_student_grade")
}

model student {
  id              String    @id(map: "PK_student") @map("s_id") @db.UniqueIdentifier
  user_id         String    @map("s_user_id") @db.UniqueIdentifier
  group_id        Int       @map("s_group_id")
  is_group_leader Boolean   @map("s_is_group_leader")
  is_marking      Boolean   @map("s_is_marking")
  subgroup        Boolean   @map("s_subgroup")
  absences        absence[]
  grades          grade[]
  group           group     @relation(fields: [group_id], references: [id], onUpdate: NoAction, map: "FK_student_group")
  user            user      @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "FK_student_user")

  @@index([group_id], map: "IX_student_group")
  @@index([user_id], map: "IX_student_user_id")
}

model subject {
  id              Int             @id(map: "PK_subject") @default(autoincrement()) @map("s_id")
  course_id       Int             @map("s_course_id")
  recurrense_json String          @map("s_recurrense_json") @db.NVarChar(Max)
  teacher_id      String          @map("s_teacher_id") @db.UniqueIdentifier
  type            Int             @map("s_type") @db.TinyInt
  lessons         lesson[]
  course          course          @relation(fields: [course_id], references: [id], onUpdate: NoAction, map: "FK_subject_course")
  subject_type    subject_type    @relation(fields: [type], references: [id], onUpdate: NoAction, map: "FK_subject_subject_type")
  teacher         user            @relation(fields: [teacher_id], references: [id], onUpdate: NoAction, map: "FK_subject_user")
  subject_groups  subject_group[]

  @@index([course_id], map: "IX_subject_course_id")
}

model subject_group {
  subject_id      Int      @map("sg_subject_id")
  group_id        Int      @map("sg_group_id")
  subgroup_number Boolean? @map("sg_subgroup_number")
  group           group    @relation(fields: [group_id], references: [id], onUpdate: NoAction, map: "FK_course_group_group")
  subject         subject  @relation(fields: [subject_id], references: [id], onUpdate: NoAction, map: "FK_subject_group_subject")

  @@id([subject_id, group_id], map: "PK_course_group")
}

model subject_type {
  id       Int       @id(map: "PK_course_type") @default(autoincrement()) @map("st_id") @db.TinyInt
  name     String    @map("st_name") @db.NChar(20)
  subjects subject[]
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B61A5B298E1") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model user {
  id         String    @id(map: "PK_user") @map("u_id") @db.UniqueIdentifier
  name       String    @map("u_name") @db.NChar(100)
  email      String    @map("u_email") @db.NChar(50)
  password   String?   @map("u_password") @db.NChar(255)
  role_id    Int       @map("u_role_id") @db.TinyInt
  surname    String    @map("u_surname") @db.NChar(50)
  patronymic String?   @map("u_patronymic") @db.NChar(50)
  rt         String?   @map("u_rt") @db.NChar(512)
  lessons    lesson[]
  student    student[]
  subjects   subject[]
  user_role  user_role @relation(fields: [role_id], references: [id], onUpdate: NoAction, map: "FK_user_user_role")

  @@index([surname, name], map: "IX_user_surname_name")
}

model user_role {
  id    Int    @id(map: "PK_user_role") @default(autoincrement()) @map("ur_id") @db.TinyInt
  name  String @map("ur_name") @db.NChar(20)
  users user[]
}
