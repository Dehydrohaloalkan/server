generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model course {
  c_id         Int       @id(map: "PK_course") @default(autoincrement())
  c_name       String    @db.NChar(20)
  c_start_date DateTime  @db.Date
  c_end_date   DateTime  @db.Date
  c_form       Int       @db.TinyInt
  subject      subject[]

  @@index([c_name], map: "IX_course_name")
}

model group {
  id       Int             @id(map: "PK_group") @default(autoincrement()) @map("g_id")
  number   String          @map("g_number") @db.NChar(10)
  form     Int             @map("g_form") @db.TinyInt
  students student[]
  subjects subject_group[]

  @@index([number], map: "IX_group_number")
}

model lesson {
  l_id                   String                   @id(map: "PK_lesson") @db.UniqueIdentifier
  l_start_time           DateTime                 @db.DateTime
  l_end_time             DateTime                 @db.DateTime
  l_subject_id           Int
  l_location             String                   @db.NChar(30)
  l_teacher_id           String                   @db.UniqueIdentifier
  subject                subject                  @relation(fields: [l_subject_id], references: [s_id], onUpdate: NoAction, map: "FK_lesson_subject")
  user                   user                     @relation(fields: [l_teacher_id], references: [u_id], onUpdate: NoAction, map: "FK_lesson_user")
  lesson_student_absence lesson_student_absence[]
  lesson_student_grade   lesson_student_grade[]

  @@index([l_start_time, l_end_time], map: "IX_lesson_start_time_end_time")
  @@index([l_subject_id], map: "IX_lesson_subject_id")
}

model lesson_student_absence {
  lsa_student_id String  @db.UniqueIdentifier
  lsa_lesson_id  String  @db.UniqueIdentifier
  lsa_hours      Int     @db.TinyInt
  lesson         lesson  @relation(fields: [lsa_lesson_id], references: [l_id], onUpdate: NoAction, map: "FK_lesson_student_absence_lesson")
  student        student @relation(fields: [lsa_student_id], references: [s_id], onUpdate: NoAction, map: "FK_lesson_student_absence_student")

  @@id([lsa_student_id, lsa_lesson_id], map: "PK_lesson_student_absence")
}

model lesson_student_grade {
  lsg_student_id  String  @db.UniqueIdentifier
  lsg_lesson_id   String  @db.UniqueIdentifier
  lsg_grade_value Int     @db.TinyInt
  lesson          lesson  @relation(fields: [lsg_lesson_id], references: [l_id], onUpdate: NoAction, map: "FK_lesson_student_grade_lesson")
  student         student @relation(fields: [lsg_student_id], references: [s_id], onUpdate: NoAction, map: "FK_lesson_student_grade_student")

  @@id([lsg_student_id, lsg_lesson_id], map: "PK_lesson_student_grade")
}

model student {
  s_id                   String                   @id(map: "PK_student") @db.UniqueIdentifier
  s_user_id              String                   @db.UniqueIdentifier
  s_group_id             Int
  s_is_group_leader      Boolean
  s_is_marking           Boolean
  s_subgroup             Boolean
  lesson_student_absence lesson_student_absence[]
  lesson_student_grade   lesson_student_grade[]
  group                  group                    @relation(fields: [s_group_id], references: [id], onUpdate: NoAction, map: "FK_student_group")
  user                   user                     @relation(fields: [s_user_id], references: [u_id], onUpdate: NoAction, map: "FK_student_user")

  @@index([s_group_id], map: "IX_student_group")
  @@index([s_user_id], map: "IX_student_user_id")
}

model subject {
  s_id              Int             @id(map: "PK_subject") @default(autoincrement())
  s_course_id       Int
  s_recurrense_json String          @db.NVarChar(Max)
  s_teacher_id      String          @db.UniqueIdentifier
  s_type            Int             @db.TinyInt
  lesson            lesson[]
  course            course          @relation(fields: [s_course_id], references: [c_id], onUpdate: NoAction, map: "FK_subject_course")
  subject_type      subject_type    @relation(fields: [s_type], references: [st_id], onUpdate: NoAction, map: "FK_subject_subject_type")
  user              user            @relation(fields: [s_teacher_id], references: [u_id], onUpdate: NoAction, map: "FK_subject_user")
  subject_group     subject_group[]

  @@index([s_course_id], map: "IX_subject_course_id")
}

model subject_group {
  sg_subject_id      Int
  sg_group_id        Int
  sg_subgroup_number Boolean?
  group              group    @relation(fields: [sg_group_id], references: [id], onUpdate: NoAction, map: "FK_course_group_group")
  subject            subject  @relation(fields: [sg_subject_id], references: [s_id], onUpdate: NoAction, map: "FK_subject_group_subject")

  @@id([sg_subject_id, sg_group_id], map: "PK_course_group")
}

model subject_type {
  st_id   Int       @id(map: "PK_course_type") @default(autoincrement()) @db.TinyInt
  st_name String    @db.NChar(20)
  subject subject[]
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B61A5B298E1") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model user {
  u_id         String    @id(map: "PK_user") @db.UniqueIdentifier
  u_name       String    @db.NChar(100)
  u_email      String    @db.NChar(50)
  u_password   String?   @db.NChar(50)
  u_role_id    Int       @db.TinyInt
  u_surname    String    @db.NChar(50)
  u_patronymic String?   @db.NChar(50)
  lesson       lesson[]
  student      student[]
  subject      subject[]
  user_role    user_role @relation(fields: [u_role_id], references: [ur_id], onUpdate: NoAction, map: "FK_user_user_role")

  @@index([u_surname, u_name], map: "IX_user_surname_name")
}

model user_role {
  ur_id   Int    @id(map: "PK_user_role") @default(autoincrement()) @db.TinyInt
  ur_name String @db.NChar(20)
  user    user[]
}
